apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"

react {}

def jscFlavor = 'org.webkit:android-jsc:+'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

apply from: new File(["node", "--print", "require.resolve('@sentry/react-native/package.json')"].execute().text.trim(), "../sentry.gradle")

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.beyondconnect.uoslife"
    defaultConfig {
        applicationId "com.beyondconnect.uoslife"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 20202
        versionName "2.0.2"
    }

    flavorDimensions 'uoslife'

    signingConfigs {
        release {
            storeFile file('uoslife.keystore')
            keyAlias 'uoslife'
            // [1] uoslife.keystore 파일을 추가한 뒤,
            // [2] local.properties에 store_password, key_password를 추가하세요.
            storePassword properties.getProperty('store_password')
            keyPassword properties.getProperty('key_password')
        }
    }

    productFlavors {
        production {
            dimension 'uoslife'
            applicationId 'com.beyondconnect.uoslife'
            resValue "string", "CodePushDeploymentKey", '"If7Mws80gp2jcVZPFFDxsJIszDrMlMmOOUOXM"'
        }
        alpha {
            dimension 'uoslife'
            applicationId 'com.beyondconnect.alpha.uoslife'
            resValue "string", "CodePushDeploymentKey", '"ur1Tn5svNZAMrGxMdrKxKzbCO0cYf3c097pIK"'
        }
    }

    buildTypes {
        debug {
            resValue "string", "CodePushDeploymentKey", '"ur1Tn5svNZAMrGxMdrKxKzbCO0cYf3c097pIK"'
        }
        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
            }
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.facebook.fresco:animated-webp:2.5.0'
    implementation 'com.facebook.fresco:animated-gif:2.5.0'
    implementation 'com.facebook.fresco:webpsupport:2.5.0'

    implementation platform('com.google.firebase:firebase-bom:32.2.2')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); 
applyNativeModulesAppBuildGradle(project)

apply from: file("../../node_modules/react-native-code-push/android/codepush.gradle")
